*svss.txt*  SVSS's Vim Style Sheet


==============================================================================
CONTENTS                                                       *svss-contents*

1. Intro ......................... |svss-intro|
2. Quickstart .................... |svss-quickstart|
3. Syntax ........................ |svss-syntax|
  3.1 Values ..................... |svss-syntax-values|
  3.2 Directive .................. |svss-syntax-directive|
  3.3 Rule ....................... |svss-syntax-rule|
  3.4 Definition ................. |svss-syntax-definition|
  3.5 Function ................... |svss-syntax-function|
4. Directives .................... |svss-directives|
5. Functions ..................... |svss-functions|
6. Commands ...................... |svss-commands|
7. Options ....................... |svss-options|
8. About ......................... |svss-about|


==============================================================================
1. Intro                                                          *svss-intro*

Are you a good friends with CSS or SCSS?
*SVSS* is a style sheet for Vim. You can easily create your own color scheme
with SCSS-like syntax. For example:
>
    $base-hue: 240;
    Normal {
        guibg: hsl($base-hue, 0, 0);
        guifg: hsl($base-hue, 100%, 50%);
    }
<
It will be compiled as the following command:
>
    hi! Normal guibg=#00000 guifg=#0000ff
<

==============================================================================
2. Quickstart                                                *svss-quickstart*

First, create a new buffer and add required directives:
>
    @name 'dessert';
    @maintainer 'you <email@example.com>';
    @license 'MIT';
    @background dark;
<
And then append highlight groups. Here is an example of a rule to set
attributes of normal text:
>
    Normal {
        guibg: rgb(0, 0, 0);
        guifg: rgb(255, 255, 255);
    }
<
See |highlight-groups| for available highlight groups, and |highlight-args|
for available arguments. Here is an example of major arguments:
>
    StatusLine {
        ctermfg: 15;     // White for 256-colors terminal
        guifg: #ffffff;  // White for GUI
        cterm: reverse;  // Reverse background and foreground
        gui: reverse;
        term: reverse;
    }
<
You can use SCSS-like variable to define common values:
>
    $base-hue: 230;
    Normal {
        guibg: hsl($base-hue, 20%, 10%);
        guifg: hsl($base-hue, 10%, 80%);
    }
<
You can also use SCSS-like color functions:
>
    LineNr {
        guibg: lighten($normal-bg, 5%);
        guifg: lighten($normal-fg, 20%);
    }
<
See |svss-functions| for available functions.
If you want to link a highlight group to another one, use @link directive:
>
    @link vimContinue to Comment;
<
After adding highlight groups, execute |:SvssSource| to apply your color
scheme and check it works fine.
Finally, execute |:SvssCompile| to compile the current SVSS file:
>
    :SvssCompile
<
Save it as colors/desseert.vim in the 'runtimepath'. Then you can use your
color scheme with the following command:
>
    :colorscheme dessert
<

==============================================================================
3. Syntax                                                        *svss-syntax*


------------------------------------------------------------------------------
3.1 Values                                                *svss-syntax-values*

There are six types of values:

Number                                                     *svss-value-number*
                A signed number. Examples: >
                    123
                    -123
                    3.14
                    50%

String                                                     *svss-value-string*
                A string. Examples: >
                    "hello, world"
                    'hello, world'
<
Variable                                                 *svss-value-variable*
                A variable. Examples: >
                    $hoge
                    $foo-bar
<
Color                                                       *svss-value-color*
                A color represented by #rrggbb format. Examples: >
                    #112233
                    #ddeeff
<
Word                                                         *svss-value-word*
                A word reserved by Vim. Examples: >
                    dark
                    light
                    reverse
                    NONE
<
List                                                         *svss-value-list*
                A list of words. Examples: >
                    bold, underline
                    bold, italic, reverse
<

------------------------------------------------------------------------------
3.2 Directive                                          *svss-syntax-directive*

Directive is used to specify attributes about the color scheme itself.
Directives are prefixed with an at sign (@). See |svss-directives| for
available directives.


------------------------------------------------------------------------------
3.3 Rule                                                    *svss-syntax-rule*

Rule is declaration set of a highlight group. One rule correspond to a
signle highlight group. For example:
>
    Normal {
        guibg: #000000;
        guifg: #ffffff;
    }
<
It will be compiled as the following command:
>
    hi! Normal guibg=#000000 guifg=#ffffff
<
You can specify multiple groups to set same declarations. Separate each
group by comma:
>
    ColorColumn, CursorColumn, CursorLine {
        guifg: #555555;
    }
<
It will be compiled as follows:
>
    hi! ColorColumn guifg=#555555
    hi! CursorColumn guifg=#555555
    hi! CursorLine guifg=#555555
<

------------------------------------------------------------------------------
3.4 Definition                                        *svss-syntax-definition*

You can use variable to define common values. Variable names are prefixed
with a dollar sign ($):
>
    $base-hue: 230;
<
Variable can be used in declarations:
>
    Normal {
        guibg: hsl($base-hue, 10%, 80%);
    }
<

------------------------------------------------------------------------------
3.5 Function                                            *svss-syntax-function*

SVSS provides useful functions to adjust colors. See |svss-functions| for
Available functions.


==============================================================================
4. Directives                                                *svss-directives*

@background [background]                           *svss-directive-background*
                        Used as 'background' of the color scheme.
>
                            @background dark;
<
@license [license]                                    *svss-directive-license*
                        License of the color scheme.
>
                            @license 'MIT';
<
@link [from] to [to]                                     *svss-directive-link*
                        Link [from] highlight group to [to] one. See
                        |hi-link| to learn about linking groups of Vim.
>
                            @link vimContinue to Comment;
<
@maintainer [maintainer]                           *svss-directive-maintainer*
                        Maintainer of the color scheme.
>
                            @maintainer 'you <email@example.com>';
<
@name [name]                                             *svss-directive-name*
                        Used as |g:colors_name| of the color scheme.
>
                            @name 'dessert';
<
@template [path]                                     *svss-directive-template*
                        Optional. Custom template for the color scheme.
>
                            @template 'template.vim';
<

==============================================================================
5. Functions                                                  *svss-functions*

adjust-color({color}[,                            *svss-function-adjust-color*
    {red}, {green}, {blue},
    {hue}, {saturation}, {lightness}])
                        Adjust some components of the specified color. Use
                        named parameter to specify optional arguments.
>
                            String {
                                guifg: adjust-color(
                                    #007f00,
                                    $saturation: +10%,
                                    $lightness: +10%);
                            }
<
darken({color}, {amount})                               *svss-function-darken*
                        Make the specified color darken.
>
                            String {
                                guifg: darken(#007f00, 10%);
                            }
<
hsl({hue}, {saturation}, {lightness})                      *svss-function-hsl*
                        Create a color from HSL components. {hue} must be in
                        the range [0, 359], {saturation} and {lightness} in
                        the range [0, 100%].
>
                            String {
                                guifg: hsl(120, 50%, 50%);
                            }
<
lighten({color}, {amount})                             *svss-function-lighten*
                        Make the specified color lighten.
>
                            String {
                                guifg: lighten(#007f00, 10%);
                            }
<
mix({color1}, {color2}[, {weight}])                        *svss-function-mix*
                        Mix two colors. If {weight} is not specified, 50%
                        will be used.
>
                            String {
                                guibg: mix(#ff0000, #0000ff, 20%);
                            }
<
rgb({red}, {green}, {blue})                                *svss-function-rgb*
                        Create a color from RGB components. Each component
                        must be in the range [0, 255].
>
                            String {
                                guifg: rgb(0, 127, 0);
                            }
<

==============================================================================
6. Commands                                                    *svss-commands*

:SvssScan                                                          *:SvssScan*
                        Scan highlighting of the current buffer and convert
                        it into SVSS.
                        (NOTE: This command is at the experimental stage of
                        development, so cannot compile its output yet)

:SvssCompile [file]                                             *:SvssCompile*
                        Compile the current buffer, and show compilation
                        result if succeed. If [file] is not specified,
                        compilation result will be output as a new buffer.

:SvssSource                                                      *:SvssSource*
                        Source the current buffer. Useful for testing your
                        color scheme.


==============================================================================
7. Options                                                      *svss-options*

g:svss_auto_source                                        *g:svss_auto_source*
                        If enabled, source SVSS file automatically when
                        saving it.


==============================================================================
8. About                                                          *svss-about*

|svss.vim| is developed by cocopon and licensed under the MIT License.
Visit the project page for the latest version:

    https://github.com/cocopon/svss.vim


==============================================================================
vim:ft=help:norl:ts=8:tw=78:
